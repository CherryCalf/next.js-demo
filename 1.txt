import React, { useRef } from 'react';
import { Select, Button } from 'antd';

const { Option } = Select;

const ClearMultipleSelects = () => {
  const selectRef1 = useRef(null);
  const selectRef2 = useRef(null);
  const selectRef3 = useRef(null);

  const clearAllSelects = () => {
    selectRef1.current?.clear();
    selectRef2.current?.clear();
    selectRef3.current?.clear();
  };

  return (
    <div>
      <Select
        ref={selectRef1}
        allowClear
        style={{ width: 200, marginBottom: 16 }}
        placeholder="Select an item"
      >
        <Option value="item1">Item 1</Option>
        <Option value="item2">Item 2</Option>
        <Option value="item3">Item 3</Option>
      </Select>
      <br />
      <Select
        ref={selectRef2}
        allowClear
        style={{ width: 200, marginBottom: 16 }}
        placeholder="Select an item"
      >
        <Option value="item1">Item 1</Option>
        <Option value="item2">Item 2</Option>
        <Option value="item3">Item 3</Option>
      </Select>
      <br />
      <Select
        ref={selectRef3}
        allowClear
        style={{ width: 200, marginBottom: 16 }}
        placeholder="Select an item"
      >
        <Option value="item1">Item 1</Option>
        <Option value="item2">Item 2</Option>
        <Option value="item3">Item 3</Option>
      </Select>
      <br />
      <Button onClick={clearAllSelects}>Clear All Selects</Button>
    </div>
  );
};

export default ClearMultipleSelects;




你可以使用前端代码在浏览器中将后台传来的 Excel 文件保存到计算机。通常，这可以通过创建一个隐藏的链接并触发点击事件来实现。以下是一个示例，展示了如何使用 JavaScript 和 Axios 获取文件并保存它：

### 示例代码

#### 1. 使用 Axios 获取文件
首先，确保你已经安装了 Axios。如果没有安装，可以使用以下命令安装：
```bash
npm install axios
```

#### 2. 前端代码
使用 Axios 获取文件并保存到计算机：

```jsx
import React from 'react';
import axios from 'axios';

const DownloadExcel = () => {
  const handleDownload = async () => {
    try {
      const response = await axios.get('https://your-backend-url.com/path-to-excel-file', {
        responseType: 'blob', // 确保响应类型是 Blob
      });
      
      // 创建一个链接元素
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'file.xlsx'); // 指定下载文件的名称

      // 触发点击事件下载文件
      document.body.appendChild(link);
      link.click();

      // 移除链接元素
      link.parentNode.removeChild(link);
    } catch (error) {
      console.error('下载文件失败', error);
    }
  };

  return (
    <button onClick={handleDownload}>
      下载 Excel 文件
    </button>
  );
};

export default DownloadExcel;
```

### 解释
1. **发送请求**：使用 Axios 发送 GET 请求获取 Excel 文件，指定 `responseType` 为 `blob` 确保获取到的是二进制文件。
2. **创建 Blob URL**：使用 `window.URL.createObjectURL` 方法创建一个 Blob URL。
3. **创建链接元素**：动态创建一个 `<a>` 元素，并设置其 `href` 属性为 Blob URL，`download` 属性为文件名。
4. **触发下载**：将链接元素添加到文档中，并触发点击事件下载文件。
5. **清理**：下载完成后，移除链接元素。

通过这种方式，你可以将后台传来的 Excel 文件下载并保存到用户的计算机中。