https://oia.zhihu.com/km_paid_content/share?km_pst=3AYYrtRXdfoklneATxZnL9MgnFaqObd5PVJiIOAbegCMRHxOKjYGU8Lz8BeG0NFdkqDX1tnKeZr2pg2xfSY8qFXtcA%3D%3D&utm_psn=1882764528837689480

import React, { useRef } from 'react';
import { Select, Button } from 'antd';

const { Option } = Select;

const ClearMultipleSelects = () => {
  const selectRef1 = useRef(null);
  const selectRef2 = useRef(null);
  const selectRef3 = useRef(null);

  const clearAllSelects = () => {
    selectRef1.current?.clear();
    selectRef2.current?.clear();
    selectRef3.current?.clear();
  };

  return (
    <div>
      <Select
        ref={selectRef1}
        allowClear
        style={{ width: 200, marginBottom: 16 }}
        placeholder="Select an item"
      >
        <Option value="item1">Item 1</Option>
        <Option value="item2">Item 2</Option>
        <Option value="item3">Item 3</Option>
      </Select>
      <br />
      <Select
        ref={selectRef2}
        allowClear
        style={{ width: 200, marginBottom: 16 }}
        placeholder="Select an item"
      >
        <Option value="item1">Item 1</Option>
        <Option value="item2">Item 2</Option>
        <Option value="item3">Item 3</Option>
      </Select>
      <br />
      <Select
        ref={selectRef3}
        allowClear
        style={{ width: 200, marginBottom: 16 }}
        placeholder="Select an item"
      >
        <Option value="item1">Item 1</Option>
        <Option value="item2">Item 2</Option>
        <Option value="item3">Item 3</Option>
      </Select>
      <br />
      <Button onClick={clearAllSelects}>Clear All Selects</Button>
    </div>
  );
};

export default ClearMultipleSelects;




你可以使用前端代码在浏览器中将后台传来的 Excel 文件保存到计算机。通常，这可以通过创建一个隐藏的链接并触发点击事件来实现。以下是一个示例，展示了如何使用 JavaScript 和 Axios 获取文件并保存它：

### 示例代码

#### 1. 使用 Axios 获取文件
首先，确保你已经安装了 Axios。如果没有安装，可以使用以下命令安装：
```bash
npm install axios
```

#### 2. 前端代码
使用 Axios 获取文件并保存到计算机：

```jsx
import React from 'react';
import axios from 'axios';

const DownloadExcel = () => {
  const handleDownload = async () => {
    try {
      const response = await axios.get('https://your-backend-url.com/path-to-excel-file', {
        responseType: 'blob', // 确保响应类型是 Blob
      });
      
      // 创建一个链接元素
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'file.xlsx'); // 指定下载文件的名称

      // 触发点击事件下载文件
      document.body.appendChild(link);
      link.click();

      // 移除链接元素
      link.parentNode.removeChild(link);
    } catch (error) {
      console.error('下载文件失败', error);
    }
  };

  return (
    <button onClick={handleDownload}>
      下载 Excel 文件
    </button>
  );
};

export default DownloadExcel;
```

### 解释
1. **发送请求**：使用 Axios 发送 GET 请求获取 Excel 文件，指定 `responseType` 为 `blob` 确保获取到的是二进制文件。
2. **创建 Blob URL**：使用 `window.URL.createObjectURL` 方法创建一个 Blob URL。
3. **创建链接元素**：动态创建一个 `<a>` 元素，并设置其 `href` 属性为 Blob URL，`download` 属性为文件名。
4. **触发下载**：将链接元素添加到文档中，并触发点击事件下载文件。
5. **清理**：下载完成后，移除链接元素。

通过这种方式，你可以将后台传来的 Excel 文件下载并保存到用户的计算机中。


要在 `next.js-demo` 项目中使用 Ant Design 的 Upload 组件，可以按照以下步骤进行：

### 1. 安装 Ant Design
首先，确保你已经安装了 Ant Design 组件库：
```bash
npm install antd
```

### 2. 使用 Upload 组件
在你的页面或组件中导入并使用 Upload 组件。以下是一个示例，展示了如何在 Next.js 项目中使用 Upload 组件。

#### 示例代码
```jsx
import React from 'react';
import { Upload, Button, message } from 'antd';
import { UploadOutlined } from '@ant-design/icons';

const UploadComponent = () => {
  const props = {
    name: 'file',
    action: '/api/upload', // 上传文件的接口地址
    headers: {
      authorization: 'authorization-text',
    },
    onChange(info) {
      if (info.file.status === 'uploading') {
        console.log(info.file, info.fileList);
      }
      if (info.file.status === 'done') {
        message.success(`${info.file.name} file uploaded successfully`);
      } else if (info.file.status === 'error') {
        message.error(`${info.file.name} file upload failed.`);
      }
    },
  };

  return (
    <Upload {...props}>
      <Button icon={<UploadOutlined />}>Click to Upload</Button>
    </Upload>
  );
};

export default UploadComponent;
```

### 3. 将组件添加到页面
在你的 Next.js 页面中，导入并使用这个组件。例如，在 `app/page.tsx` 文件中：

```jsx
import React from 'react';
import UploadComponent from '../components/UploadComponent'; // 假设你将组件放在 components 文件夹中

const HomePage = () => {
  return (
    <div>
      <h1>Upload your files</h1>
      <UploadComponent />
    </div>
  );
};

export default HomePage;
```

### 4. 处理文件上传
确保你在 `/api/upload` 路径上有一个 API 来处理文件上传。你可以在 `pages/api/upload.js` 文件中添加一个简单的例子：

```javascript
import formidable from 'formidable';
import fs from 'fs';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default function handler(req, res) {
  const form = new formidable.IncomingForm();
  form.uploadDir = "./uploads"; // 确保此目录存在
  form.keepExtensions = true;

  form.parse(req, (err, fields, files) => {
    if (err) {
      res.status(500).json({ error: 'Failed to upload file' });
      return;
    }
    res.status(200).json({ message: 'File uploaded successfully' });
  });
}
```

通过这些步骤，你就可以在 Next.js 项目中使用 Ant Design 的 Upload 组件来上传文件了。




在 React 中，遍历和渲染标签通常使用 JavaScript 的数组方法，比如 `map`。以下是一个简单的例子，展示了如何遍历一个数组并渲染每个元素为一个列表项：

```jsx
import React from 'react';

const MyComponent = () => {
  const items = ['Item 1', 'Item 2', 'Item 3', 'Item 4'];

  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
};

export default MyComponent;
```

在这个示例中，我们定义了一个数组 `items`，然后使用 `map` 方法遍历该数组，并为每个元素创建一个 `<li>` 标签。每个 `<li>` 标签都需要一个唯一的 `key` 属性，这里我们使用数组的索引 `index` 作为 `key`。

你还可以遍历一个对象数组，并渲染更复杂的组件。例如：

```jsx
import React from 'react';

const MyComponent = () => {
  const users = [
    { id: 1, name: 'Alice' },
    { id: 2, name: 'Bob' },
    { id: 3, name: 'Charlie' }
  ];

  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default MyComponent;
```

在这个示例中，我们遍历一个对象数组 `users`，并使用每个对象的 `id` 作为 `key`，渲染每个用户的名字。

希望这些示例对你有帮助！如果你有其他问题，请随时问我。




//添加table总条目数

import React, { useState } from 'react';
import { Table } from 'antd';

const data = [
  // 这里填充你的数据
];

const TableWithPagination = () => {
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: data.length, // 总条数
  });

  const handleTableChange = (pagination) => {
    setPagination(pagination);
  };

  return (
    <Table
      dataSource={data}
      pagination={{
        ...pagination,
        showTotal: (total) => `总共 ${total} 条`,
      }}
      onChange={handleTableChange}
    />
  );
};

export default TableWithPagination;



//添加表格加载样式解决表格渲染时闪烁

import React, { useState, useEffect, useMemo } from 'react';
import { Table, Spin } from 'antd';

const TableWithDynamicHeader = () => {
  const [loading, setLoading] = useState(true);
  const [columns, setColumns] = useState([]);

  // 模拟动态获取表头属性和样式
  useEffect(() => {
    setTimeout(() => {
      setColumns([
        {
          title: 'Name',
          dataIndex: 'name',
          key: 'name',
          render: text => <a>{text}</a>,
        },
        {
          title: 'Age',
          dataIndex: 'age',
          key: 'age',
        },
        {
          title: 'Address',
          dataIndex: 'address',
          key: 'address',
        },
      ]);
      setLoading(false);
    }, 1000);
  }, []);

  const memoizedColumns = useMemo(() => columns, [columns]);

  const data = [
    {
      key: '1',
      name: 'John Brown',
      age: 32,
      address: 'New York No. 1 Lake Park',
    },
    {
      key: '2',
      name: 'Jim Green',
      age: 42,
      address: 'London No. 1 Lake Park',
    },
    {
      key: '3',
      name: 'Joe Black',
      age: 32,
      address: 'Sidney No. 1 Lake Park',
    },
  ];

  return (
    <Spin spinning={loading}>
      <Table columns={memoizedColumns} dataSource={data} />
    </Spin>
  );
};

export default TableWithDynamicHeader;








const selectRef1 = useRef(null);
  const selectRef2 = useRef(null);
  const [selectedValues1, setSelectedValues1] = useState<string[]>([]);
  const [selectedValues2, setSelectedValues2] = useState<string[]>([]);
  let param = {
    dalianTeam: [],
    project: []
  }
  const handleChange1 = (value: string[]) => {
    console.log(`selected ${value}`);
    param.dalianTeam = value
    console.log(param)
    setSelectedValues1(value);
  };
  const handleChange2 = (value: string[]) => {
    console.log(`selected ${value}`);
    param.project = value
    console.log(param)
    setSelectedValues2(value);
  };

  const getAll = () => {
    console.log(param)
    axiosPost("/user/filterData", param).then(res => {
      setDataSource3(res.data.data)
    });
  }
  //重置表格数据
  const resetTableData = () => {
    param = {
      dalianTeam: [],
      project: []
    }
    setSelectedValues1([])
    setSelectedValues2([])
    getAll()
  }





在 Next.js 项目中，遇到 `localStorage` 未定义的问题通常是因为 `localStorage` 是浏览器环境中的 API，而在服务端渲染（SSR）过程中不可用。要解决这个问题，可以确保 `localStorage` 相关的代码仅在客户端执行。

### 修复 `localStorage` 未定义的问题

以下是修复代码的步骤：

1. **使用 `typeof` 检查 `localStorage` 是否在浏览器环境中可用。**
2. **将 `localStorage` 相关的操作放在 `useEffect` 钩子中，以确保它仅在客户端执行。**

### 修改后的代码示例

```tsx
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import React from "react";
import { Button, Input, Space, Flex, Modal, Form, message } from "antd";
import { axiosPost, axiosPut } from "@/public/AxiosUtil";
import Image from 'next/image';
import { useMount, useUnmount } from 'ahooks';
import { useLayoutStore } from '@/store/layoutStore';

export default function Login({ children }: { children: React.ReactNode }) {
  useMount(() => {
    useLayoutStore.setState({ skipGlobalLayout: true });
  });
  useUnmount(() => {
    // 如果需要在离开页面时重置状态
    useLayoutStore.setState({ skipGlobalLayout: false });
  });

  const router = useRouter();
  const [usernameLogin, setUsernameLogin] = useState<string>();
  const [passwordLogin, setPasswordLogin] = useState<string>();

  const [setUsername, setSetUsername] = useState<string>();
  const [setOldPassword, setSetOldPassword] = useState<string>();
  const [setNewPassword, setSetNewPassword] = useState<string>();
  const [setNewPasswordAgain, setSetNewPasswordAgain] = useState<string>();

  const [messageApi, contextHolder] = message.useMessage();

  // 模态框方法
  const passwordError = () => {
    messageApi.open({
      type: 'error',
      content: '密码错误',
      className: 'custom-class',
      style: {
        marginLeft: '20vh',
      },
    });
  };

  const editSuccess = () => {
    messageApi.open({
      type: 'success',
      content: '修改成功',
      className: 'custom-class',
      style: {
        marginLeft: '20vh',
      },
    });
  };

  const editError = () => {
    messageApi.open({
      }
    });
  };

  // 切换登录page
  const handleCancel = () => {
    const login = document.getElementById("login");
    const edit = document.getElementById("edit");
    if (login && edit) {
      login.style.display = "flex";
      edit.style.display = "none";
    }
  };

  // 切换修改page
  const openModal = () => {
    const login = document.getElementById("login");
    const edit = document.getElementById("edit");
    if (login && edit) {
      login.style.display = "none";
      edit.style.display = "flex";
    }
  };

  // 登录函数
  const handleSubmit = (e) => {
    e.preventDefault();
    axiosPost('/user/login', { username: usernameLogin, password: passwordLogin }).then(res => {
      if (res.data.code === 200) {
        if (typeof window !== 'undefined') {
          localStorage.setItem("token", res.data.data.token);
        }
        router.push("/filesUpload");
      } else {
        passwordError();
      }
    });
  };

  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        alignContent: "center",
        justifyContent: "center",
        flexDirection: "column",
        height: "100vh",
        width: "100vw",
        margin: 0,
        padding: 0,
        background: "#0568C1",
        backgroundSize: "300% 300%",
        animation: "gradientAnimation 10s ease infinite",
      }}
    >
      <form
        onSubmit={handleSubmit}
        style={{
          padding: "30px",
          display: "flex",
          flexDirection: "row",
          marginTop: "100px",
          justifyContent: "space-around",
          alignItems: "center",
          backgroundColor: "#FFFFFF",
          borderRadius: "8px",
          width: "700px",
          height: "350px"
        }}
        id="login">
        <div style={{ width: "250px" }}>
          {/* 用户名 */}
          <div style={{ display: "flex", flexDirection: "row", width: "300px", justifyContent: "space-around" }}>
            <label style={{ display: "flex", flexDirection: "row", width: "300px", justifyContent: "space-around", alignItems: "center" }}>用户名:
              <Space.Compact>
                <Input
                  placeholder="请输入用户名"
                  style={{ width: "200px" }}
                  value={usernameLogin}
                  onChange={e => {
                    setUsernameLogin(e.target.value);
                  }}
                />
              </Space.Compact></label>
          </div>
          {/* 密码 */}
          <div style={{ display: "flex", flexDirection: "row", width: "300px", justifyContent: "space-around", marginTop: "20px" }}>
            <label style={{ display: "flex", flexDirection: "row", width: "300px", justifyContent: "space-around", alignItems: "center" }}>密&nbsp;&nbsp;&nbsp;&nbsp;码:
              <Input.Password
                value={passwordLogin}
                placeholder="请输入密码"
                style={{ width: "200px" }}
                onChange={e => {
                  setPasswordLogin(e.target.value);
                }}
              /></label>
          </div>
          <div style={{ display: "flex", width: "300px", flexDirection: "column-reverse", justifyContent: "center", alignItems: "flex-end", }}>
            <Button style={{ fontSize: "12px" }} type="link" onClick={openModal} autoInsertSpace >修改密码</Button>
          </div>
          <div style={{ display: "flex", width: "300px", justifyContent: "center", marginTop: "10px", marginLeft: "20px", alignItems: "center" }}>
            <Flex gap="small" wrap >
              <Button type="primary" autoInsertSpace onClick={handleSubmit} >登录</Button>
            </Flex>
          </div>
        </div>
        <div>
          <Image src='/1.png' alt="" width="250" height="180" />
        </div>
      </form>

      <div
        style={{
          padding: "30px",
          display: "none",
          flexDirection: "row",
          marginTop: "100px",
          justifyContent: "space-around",
          alignItems: "center",
          backgroundColor: "#FFFFFF",
          borderRadius: "8px",
          width: "700px",
          height: "350px",
        }}
        id="edit">

        <Form
          name="basic"
          labelCol={{ span: 8 }}
          wrapperCol={{ span: 16 }}
          style={{ width: "300px" }}
          initialValues={{ remember: true }}
          autoComplete="off"
        >
          <Form.Item
            label="用户名"
            name="username"
            rules={[{ required: true, message: '请输入用户名!' }]}
          >
            <Input
              value={setUsername}
              onChange={e => {
                setSetUsername(e.target.value);
              }} />
          </Form.Item>
          <Form.Item
            label="原密码"
            name="password1"
            rules={[{ required: true, message: '请输入原密码!' }]}
          >
            <Input.Password
              value={setOldPassword}
              onChange={e => {
                setSetOldPassword(e.target.value);
              }} />
          </Form.Item>
          <Form.Item
            label="新密码"
            name="password2"
            rules={[{ required: true, message: '请输入新密码!' }]}
          >
            <Input.Password
              value={setNewPassword}
              onChange={e => {
                setSetNewPassword(e.target.value);
              }} />
          </Form.Item>
          <Form.Item
            label="确认新密码"
            name="password3"
            rules={[{ required: true, message: '请确认新密码!' }]}
          >
            <Input.Password
              value={setNewPasswordAgain}
              onChange={e => {
                setSetNewPasswordAgain(e.target.value);
              }} />
          </Form.Item>
          <div style={{ display: "flex", width: "300px", flexDirection: "column", justifyContent: "center", alignItems: "flex-end", marginTop: "-25px" }}>
            <Button style={{ fontSize: "12px", }} type="link" onClick={handleCancel} autoInsertSpace >返回</Button>
          </div>
          <div style={{ display: "flex", justifyContent: "center", marginTop: "10px", marginLeft: "20px", alignItems: "center", width: "300px" }}>
            <Flex gap="small" wrap >
              <Button type="primary" autoInsertSpace onClick={handleOk} >修改</Button>
            </Flex>
          </div>
        </Form>
        <div>
          <Image src='/1.png' alt="" width="250" height="180" />
        </div>
      </div>
      {contextHolder}
    </div>
  );
}
```

### 关键修改点
- **使用 `typeof window !== 'undefined'` 检查代码是否在浏览器环境中执行。**
- **将 `localStorage` 操作放在 `useEffect` 钩子中，确保在客户端执行。**

这样可以避免在服务端渲染过程中访问 `localStorage`，从而解决打包时 `localStorage` 未定义的问题。